//
//  MainViewModel.swift
//  ClassToday
//
//  Created by Î∞ïÌÉúÌòÑ on 2022/10/13.
//

import Foundation
import RxSwift
import RxCocoa

enum LocationError: Error {
    case NonSavedLocation
}

protocol MainViewModelInput {
    func refreshClassItemList()
    func viewWillAppear()
    func fetchData()
    func checkLocationAuthorization()
    func didTapCategoryButton()
    func didTapStarButton()
    func didSelectItem(at index: Int)
    func didSelectSegmentControl(segmentControlIndex: Int)
}

protocol MainViewModelOutput {
    var isNowLocationFetching: BehaviorRelay<Bool> { get }
    var isNowDataFetching: BehaviorRelay<Bool> { get }
    var isLocationAuthorizationAllowed: BehaviorRelay<Bool> { get }
    var locationTitle: BehaviorSubject<String?> { get }

    var currentUser: BehaviorSubject<User?> { get }
    var outPutData: BehaviorSubject<[ClassItem]> { get }

    var classDetailViewController: BehaviorSubject<ClassDetailViewController?> { get }
    var categoryListViewController: BehaviorSubject<CategoryListViewController?> { get }
    var starViewController: BehaviorSubject<StarViewController?> { get }
}

protocol MainViewModel: MainViewModelInput, MainViewModelOutput {}

final class DefaultMainViewModel: MainViewModel {
    
    private let fetchClassItemUseCase: FetchClassItemUseCase
    private let locationManager = LocationManager.shared
    private let disposeBag = DisposeBag()
    
    // MARK: - OUTPUT
    let isNowLocationFetching: BehaviorRelay<Bool> = BehaviorRelay<Bool>(value: false)
    let isNowDataFetching: BehaviorRelay<Bool> = BehaviorRelay<Bool>(value: false)
    let isLocationAuthorizationAllowed: BehaviorRelay<Bool> = BehaviorRelay<Bool>(value: false)
    let locationTitle: BehaviorSubject<String?> = BehaviorSubject<String?>(value: nil)
    
    let currentUser: BehaviorSubject<User?> = BehaviorSubject<User?>(value: nil)
    let outPutData: BehaviorSubject<[ClassItem]> = BehaviorSubject<[ClassItem]>(value: [])

    let classDetailViewController: BehaviorSubject<ClassDetailViewController?> = BehaviorSubject<ClassDetailViewController?>(value: nil)
    let categoryListViewController: BehaviorSubject<CategoryListViewController?> = BehaviorSubject<CategoryListViewController?>(value: nil)
    let starViewController: BehaviorSubject<StarViewController?> = BehaviorSubject<StarViewController?>(value: nil)

    private let viewModelData: BehaviorSubject<[ClassItem]> = BehaviorSubject<[ClassItem]>(value: [])
    private var currentSegmentControlIndex: Int = 0
    
    // MARK: - Init
    init(fetchClassItemUseCase: FetchClassItemUseCase) {
        self.fetchClassItemUseCase = fetchClassItemUseCase
        checkLocationAuthorization()
        configureLocation()
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(updateUserData(_:)),
                                               name: NSNotification.Name("updateUserData"),
                                               object: nil)
    }
    
    /// Ïú†Ï†ÄÏùò ÌÇ§ÏõåÎìú Ï£ºÏÜåÏóê Îî∞Î•∏ Í∏∞Ï§Ä ÏßÄÏó≠ Íµ¨ÏÑ±
    ///
    ///  - Ï∂úÎ†• ÌòïÌÉú: "@@Ïãú @@Íµ¨Ïùò ÏàòÏóÖ"
    private func configureLocation() {
        isNowLocationFetching.accept(true)
        _ = User.getCurrentUserRx()
            .subscribe(
                onNext: { user in
                    self.currentUser.onNext(user)
                    self.isNowLocationFetching.accept(false)
                    guard let location = user.detailLocation else {
                        // TODO: ÏúÑÏπò ÏÑ§Ï†ï ÏñºÎüø Ìò∏Ï∂ú Ìï¥ÏïºÎê®
                        self.locationTitle.onNext(nil)
                        return
                    }
                    self.locationTitle.onNext("\(location)Ïùò ÏàòÏóÖ")
                },
                onError: { error in
                    self.isNowLocationFetching.accept(false)
                    self.locationTitle.onNext(nil)
                    print("ERROR \(error)üåî")
                }
            )
            .disposed(by: disposeBag)
    }
    
    /// Ïú†Ï†Ä Ï†ïÎ≥¥Ïóê Î≥ÄÍ≤ΩÏù¥ ÏûàÏúºÎ©¥, ÏÉàÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ ÏßÑÌñâ
    @objc func updateUserData(_ notification: Notification) {
        configureLocation()
    }
}

// MARK: - INPUT
extension DefaultMainViewModel {
    func refreshClassItemList() {
        checkLocationAuthorization()
        fetchData()
    }
    
    func viewWillAppear() {
        checkLocationAuthorization()
    }
    
    /// ÌÇ§ÏõåÎìú Ï£ºÏÜåÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÏàòÏóÖ ÏïÑÏù¥ÌÖúÏùÑ Ìå®Ïπ≠Ìï©ÎãàÎã§.
    ///
    /// - Ìå®Ïπ≠ Í∏∞Ï§Ä: UserÏùò KeywordLocation Í∞í ("@@Íµ¨")
    func fetchData() {
        isNowDataFetching.accept(true)
        guard let currentUser = try? currentUser.value() else {
            debugPrint("Ïú†Ï†Ä Ï†ïÎ≥¥Í∞Ä ÏóÜÍ±∞ÎÇò ÏïÑÏßÅ Î∞õÏïÑÏò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§üò≠")
            isNowDataFetching.accept(false)
            return
        }
        guard let keyword = currentUser.keywordLocation else {
            debugPrint("Ïú†Ï†ÄÏùò ÌÇ§ÏõåÎìú Ï£ºÏÜå ÏÑ§Ï†ï Í∞íÏù¥ ÏóÜÏäµÎãàÎã§. Ï£ºÏÜå ÏÑ§Ï†ï Î®ºÏ†Ä Ìï¥Ï£ºÏÑ∏Ïöîüò≠")
            isNowDataFetching.accept(false)
            return
        }
        guard isLocationAuthorizationAllowed.value else {
            debugPrint("ÏúÑÏπòÏ†ïÎ≥¥Í∂åÌïúÏù¥ ÌóàÏö©ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöîüò≠")
            isNowDataFetching.accept(false)
            return
        }
        fetchClassItemUseCase.excuteRx(param: .fetchByKeyword(keyword: keyword))
            .map { (classItems) -> [ClassItem] in
                classItems.sorted { $0 > $1 }
            }
            .subscribe( onNext: { [weak self] classItems in
                self?.isNowDataFetching.accept(false)
                self?.viewModelData.onNext(classItems)
                switch self?.currentSegmentControlIndex {
                case 1:
                    self?.outPutData.onNext(classItems.filter { $0.itemType == ClassItemType.buy })
                case 2:
                    self?.outPutData.onNext(classItems.filter { $0.itemType == ClassItemType.sell })
                default:
                    self?.outPutData.onNext(classItems)
                }
            })
            .disposed(by: disposeBag)
    }
    
    /// ÏúÑÏπòÏ†ïÎ≥¥ Í∂åÌïúÏùò ÏÉÅÌÉúÍ∞íÏùÑ Ï≤¥ÌÅ¨Ìï©ÎãàÎã§.
    func checkLocationAuthorization() {
        isLocationAuthorizationAllowed.accept(locationManager.isLocationAuthorizationAllowed())
    }
    
    func didTapCategoryButton() {
        categoryListViewController.onNext(AppDIContainer()
            .makeDIContainer()
            .makeCategoryListViewController(categoryType: .subject)
        )
    }
    
    func didTapStarButton() {
        starViewController.onNext(AppDIContainer()
            .makeDIContainer()
            .makeStarViewController()
        )
    }

    /// cell select Ïãú Ìò∏Ï∂úÌïòÎäî item Î∞òÌôò Î©îÏÑúÎìú
    func didSelectItem(at index: Int) {
        if let classItem = try? outPutData.value()[index] {
            classDetailViewController.onNext(
                AppDIContainer()
                    .makeDIContainer()
                    .makeClassDetailViewController(classItem: classItem)
            )
        }
    }

    func didSelectSegmentControl(segmentControlIndex: Int) {
        self.currentSegmentControlIndex = segmentControlIndex

        guard let datas = try? viewModelData.value() else {
            outPutData.onNext([])
            return
        }

        switch segmentControlIndex {
        case 1:
            outPutData.onNext(datas.filter { $0.itemType == .buy })
        case 2:
            outPutData.onNext(datas.filter { $0.itemType == .sell })
        default:
            outPutData.onNext(datas)
        }
    }
}
