//
//  MainViewModel.swift
//  ClassToday
//
//  Created by Î∞ïÌÉúÌòÑ on 2022/10/13.
//

import Foundation

enum LocationError: Error {
    case NonSavedLocation
}

protocol MainViewModelInput {
    func refreshClassItemList()
    func viewWillAppear()
    func fetchData()
    func checkLocationAuthorization()
    func didTapCategoryButton()
    func didTapStarButton()
    func didSelectItem(segmentControlIndex: Int, at index: Int)
}

protocol MainViewModelOutput {
    var isNowLocationFetching: Observable<Bool> { get }
    var isNowDataFetching: Observable<Bool> { get }
    var isLocationAuthorizationAllowed: Observable<Bool> { get }
    var locationTitle: Observable<String?> { get }

    var currentUser: Observable<User?> { get }
    var data: Observable<[ClassItem]> { get }
    var dataBuy: Observable<[ClassItem]> { get }
    var dataSell: Observable<[ClassItem]> { get }
    
    var classDetailViewController: Observable<ClassDetailViewController?> { get }
    var categoryListViewController: Observable<CategoryListViewController?> { get }
    var starViewController: Observable<StarViewController?> { get }
}

protocol MainViewModel: MainViewModelInput, MainViewModelOutput {}

final class DefaultMainViewModel: MainViewModel {

    private let fetchClassItemUseCase: FetchClassItemUseCase
    private let locationManager = LocationManager.shared

    // MARK: - OUTPUT
    let isNowLocationFetching: Observable<Bool> = Observable(false)
    let isNowDataFetching: Observable<Bool> = Observable(false)
    let isLocationAuthorizationAllowed: Observable<Bool> = Observable(true)
    let locationTitle: Observable<String?> = Observable(nil)

    let currentUser: Observable<User?> = Observable(nil)
    let data: Observable<[ClassItem]> = Observable([])
    let dataBuy: Observable<[ClassItem]> = Observable([])
    let dataSell: Observable<[ClassItem]> = Observable([])

    let classDetailViewController: Observable<ClassDetailViewController?> = Observable(nil)
    let categoryListViewController: Observable<CategoryListViewController?> = Observable(nil)
    let starViewController: Observable<StarViewController?> = Observable(nil)

    // MARK: - Init
    init(fetchClassItemUseCase: FetchClassItemUseCase) {
        self.fetchClassItemUseCase = fetchClassItemUseCase
        checkLocationAuthorization()
        configureLocation()
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(updateUserData(_:)),
                                               name: NSNotification.Name("updateUserData"),
                                               object: nil)
    }

    /// Ïú†Ï†ÄÏùò ÌÇ§ÏõåÎìú Ï£ºÏÜåÏóê Îî∞Î•∏ Í∏∞Ï§Ä ÏßÄÏó≠ Íµ¨ÏÑ±
    ///
    ///  - Ï∂úÎ†• ÌòïÌÉú: "@@Ïãú @@Íµ¨Ïùò ÏàòÏóÖ"
    private func configureLocation() {
        isNowLocationFetching.value = true
        User.getCurrentUser { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let user):
                self.currentUser.value = user
                self.isNowLocationFetching.value = false
                guard let location = user.detailLocation else {
                    // TODO: ÏúÑÏπò ÏÑ§Ï†ï ÏñºÎüø Ìò∏Ï∂ú Ìï¥ÏïºÎê®
                    self.locationTitle.value = nil
                    return
                }
                self.locationTitle.value = "\(location)Ïùò ÏàòÏóÖ"

            case .failure(let error):
                self.isNowLocationFetching.value = false
                self.locationTitle.value = nil
                print("ERROR \(error)üåî")
            }
        }
    }

    /// Ïú†Ï†Ä Ï†ïÎ≥¥Ïóê Î≥ÄÍ≤ΩÏù¥ ÏûàÏúºÎ©¥, ÏÉàÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ ÏßÑÌñâ
    @objc func updateUserData(_ notification: Notification) {
        configureLocation()
    }
}

// MARK: - INPUT
extension DefaultMainViewModel {
    func refreshClassItemList() {
        checkLocationAuthorization()
        fetchData()
    }

    func viewWillAppear() {
        checkLocationAuthorization()
    }

    /// ÌÇ§ÏõåÎìú Ï£ºÏÜåÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÏàòÏóÖ ÏïÑÏù¥ÌÖúÏùÑ Ìå®Ïπ≠Ìï©ÎãàÎã§.
    ///
    /// - Ìå®Ïπ≠ Í∏∞Ï§Ä: UserÏùò KeywordLocation Í∞í ("@@Íµ¨")
    func fetchData() {
        isNowDataFetching.value = true
        guard let currentUser = self.currentUser.value else {
            debugPrint("Ïú†Ï†Ä Ï†ïÎ≥¥Í∞Ä ÏóÜÍ±∞ÎÇò ÏïÑÏßÅ Î∞õÏïÑÏò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§üò≠")
            isNowDataFetching.value = false
            return
        }
        guard let keyword = currentUser.keywordLocation else {
            debugPrint("Ïú†Ï†ÄÏùò ÌÇ§ÏõåÎìú Ï£ºÏÜå ÏÑ§Ï†ï Í∞íÏù¥ ÏóÜÏäµÎãàÎã§. Ï£ºÏÜå ÏÑ§Ï†ï Î®ºÏ†Ä Ìï¥Ï£ºÏÑ∏Ïöîüò≠")
            isNowDataFetching.value = false
            return
        }
        guard isLocationAuthorizationAllowed.value else {
            debugPrint("ÏúÑÏπòÏ†ïÎ≥¥Í∂åÌïúÏù¥ ÌóàÏö©ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöîüò≠")
            isNowDataFetching.value = false
            return
        }
        fetchClassItemUseCase.excute(param: .fetchByKeyword(keyword: keyword)) { [weak self] data in
            self?.isNowDataFetching.value = false
            // ÏµúÏã†Ïàú Ï†ïÎ†¨
            self?.data.value = data.sorted { $0 > $1 }
            self?.dataBuy.value = data.filter { $0.itemType == ClassItemType.buy }.sorted { $0 > $1 }
            self?.dataSell.value = data.filter { $0.itemType == ClassItemType.sell }.sorted { $0 > $1 }
        }
    }

    /// ÏúÑÏπòÏ†ïÎ≥¥ Í∂åÌïúÏùò ÏÉÅÌÉúÍ∞íÏùÑ Ï≤¥ÌÅ¨Ìï©ÎãàÎã§.
    func checkLocationAuthorization() {
        isLocationAuthorizationAllowed.value = LocationManager.shared.isLocationAuthorizationAllowed()
    }

    func didTapCategoryButton() {
        categoryListViewController.value =  AppDIContainer()
            .makeDIContainer()
            .makeCategoryListViewController(categoryType: .subject)
    }

    func didTapStarButton() {
        starViewController.value = AppDIContainer().makeDIContainer().makeStarViewController()
    }

    func didSelectItem(segmentControlIndex: Int, at index: Int) {
        let classItem: ClassItem
        switch segmentControlIndex {
            case 1:
            classItem = dataBuy.value[index]
            case 2:
            classItem = dataSell.value[index]
            default:
            classItem = data.value[index]
        }
        classDetailViewController.value = ClassDetailViewController(classItem: classItem)
    }
}
